export var __esModule: boolean;
export default _default;
export class MongoStorageAdapter {
    constructor({ uri, collectionPrefix, mongoOptions }: {
        uri?: any;
        collectionPrefix?: string;
        mongoOptions?: {};
    });
    _uri: any;
    _collectionPrefix: string;
    _mongoOptions: {};
    _onchange: () => void;
    _maxTimeMS: any;
    canSortOnJoinTables: boolean;
    enableSchemaHooks: boolean;
    watch(callback: any): void;
    connect(): any;
    connectionPromise: any;
    client: any;
    database: any;
    handleError(error: any): void;
    handleShutdown(): any;
    _adaptiveCollection(name: any): any;
    _schemaCollection(): any;
    _stream: any;
    classExists(name: any): any;
    setClassLevelPermissions(className: any, CLPs: any): any;
    setIndexesWithSchemaFormat(className: any, submittedIndexes: any, existingIndexes: {}, fields: any): Promise<any>;
    setIndexesFromMongo(className: any): any;
    createClass(className: any, schema: any): Promise<any>;
    addFieldIfNotExists(className: any, fieldName: any, type: any): any;
    deleteClass(className: any): any;
    deleteAllClasses(fast: any): any;
    deleteFields(className: any, schema: any, fieldNames: any): any;
    getAllClasses(): any;
    getClass(className: any): any;
    createObject(className: any, schema: any, object: any, transactionalSession: any): any;
    deleteObjectsByQuery(className: any, schema: any, query: any, transactionalSession: any): any;
    updateObjectsByQuery(className: any, schema: any, query: any, update: any, transactionalSession: any): any;
    findOneAndUpdate(className: any, schema: any, query: any, update: any, transactionalSession: any): any;
    upsertOneObject(className: any, schema: any, query: any, update: any, transactionalSession: any): any;
    find(className: any, schema: any, query: any, { skip, limit, sort, keys, readPreference, hint, caseInsensitive, explain }: {
        skip: any;
        limit: any;
        sort: any;
        keys: any;
        readPreference: any;
        hint: any;
        caseInsensitive: any;
        explain: any;
    }): Promise<any>;
    ensureIndex(className: any, schema: any, fieldNames: any, indexName: any, caseInsensitive?: boolean, options?: {}): any;
    ensureUniqueness(className: any, schema: any, fieldNames: any): any;
    _rawFind(className: any, query: any): any;
    count(className: any, schema: any, query: any, readPreference: any, hint: any): any;
    distinct(className: any, schema: any, query: any, fieldName: any): any;
    aggregate(className: any, schema: any, pipeline: any, readPreference: any, hint: any, explain: any): any;
    _parseAggregateArgs(schema: any, pipeline: any): any;
    _parseAggregateProjectArgs(schema: any, pipeline: any): {
        _id: any;
        _created_at: any;
        _updated_at: any;
    };
    _parseAggregateGroupArgs(schema: any, pipeline: any): any;
    _convertToDate(value: any): {};
    _parseReadPreference(readPreference: any): any;
    performInitialization(): Promise<void>;
    createIndex(className: any, index: any): any;
    createIndexes(className: any, indexes: any): any;
    createIndexesIfNeeded(className: any, fieldName: any, type: any): any;
    createTextIndexesIfNeeded(className: any, query: any, schema: any): Promise<any>;
    getIndexes(className: any): any;
    dropIndex(className: any, index: any): any;
    dropAllIndexes(className: any): any;
    updateSchemaWithIndexes(): any;
    createTransactionalSession(): Promise<any>;
    commitTransactionalSession(transactionalSection: any): any;
    abortTransactionalSession(transactionalSection: any): any;
}
declare var _default: typeof MongoStorageAdapter;
