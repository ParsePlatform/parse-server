export = RestQuery;
declare function RestQuery(config: any, auth: any, className: any, restWhere: {}, restOptions: {}, clientSDK: any, runAfterFind: boolean, context: any): void;
declare class RestQuery {
    constructor(config: any, auth: any, className: any, restWhere: {}, restOptions: {}, clientSDK: any, runAfterFind: boolean, context: any);
    config: any;
    auth: any;
    className: any;
    restWhere: {};
    restOptions: {};
    clientSDK: any;
    runAfterFind: boolean;
    response: any;
    findOptions: {};
    context: any;
    doCount: boolean;
    includeAll: boolean;
    include: any[];
    keys: any[];
    excludeKeys: any[];
    redirectKey: any;
    redirectClassName: any;
    execute(executeOptions: any): any;
    each(callback: any): any;
    buildRestWhere(): any;
    getUserAndRoleACL(): any;
    redirectClassNameForKey(): any;
    validateClientClassCreation(): any;
    replaceInQuery(): any;
    replaceNotInQuery(): any;
    replaceSelect(): any;
    replaceDontSelect(): any;
    replaceEquality(): void;
    runFind(options?: {}): any;
    runCount(): any;
    handleIncludeAll(): any;
    handleExcludeKeys(): any;
    handleInclude(): any;
    runAfterFindTrigger(): Promise<void>;
}
