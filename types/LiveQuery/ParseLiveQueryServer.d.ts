export var __esModule: boolean;
export class ParseLiveQueryServer {
    constructor(server: any, config?: {}, parseServerConfig?: {});
    server: any;
    clients: Map<any, any>;
    subscriptions: Map<any, any>;
    config: {};
    keyPairs: Map<any, any>;
    cacheController: import("../Controllers/CacheController").CacheController;
    authCache: any;
    parseWebSocketServer: _ParseWebSocketServer.ParseWebSocketServer;
    subscriber: any;
    _inflateParseObject(message: any): void;
    _onAfterDelete(message: any): Promise<void>;
    _onAfterSave(message: any): Promise<void>;
    _onConnect(parseWebsocket: any): void;
    _matchesSubscription(parseObject: any, subscription: any): any;
    getAuthForSessionToken(sessionToken: any): any;
    _matchesCLP(classLevelPermissions: any, object: any, client: any, requestId: any, op: any): Promise<boolean>;
    _getCLPOperation(query: any): "get" | "find";
    _verifyACL(acl: any, token: any): Promise<boolean>;
    _matchesACL(acl: any, client: any, requestId: any): Promise<boolean>;
    _handleConnect(parseWebsocket: any, request: any): Promise<void>;
    _hasMasterKey(request: any, validKeyPairs: any): boolean;
    _validateKeys(request: any, validKeyPairs: any): boolean;
    _handleSubscribe(parseWebsocket: any, request: any): Promise<void>;
    _handleUpdateSubscription(parseWebsocket: any, request: any): void;
    _handleUnsubscribe(parseWebsocket: any, request: any, notifyClient?: boolean): void;
}
import _ParseWebSocketServer = require("./ParseWebSocketServer");
